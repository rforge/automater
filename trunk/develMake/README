The make files in this directory are meant to be in a directory above R package
directories. The make files facilitate testing and building of the packages. 
(The directory will be called "qc" below, but this name can be anything.) 
The make system should be especially helpful when there are dependency 
relationships among the packages in the qc directory. 


###############  Configuration ############### 

With the qc directory in place, first put package subdirectories below it. These
subdirectories can be source package files, svn checked out copies, or links 
to either of these. Then put a Makefile in each package directory. These 
Makefiles are relatively simple. This is an example for package tframePlus, 
which depends on package tframe:

PREREQ_PACS=tframe
QC=${shell cd ../ ; pwd}
include $(QC)/Makevars 
default:   $(DEFAULT)
include $(QC)/Makerules

If there is more than one item in PREREQ_PACS then the list should be separated
by spaces. In the includes above it would usually be possible to use, for 
example, ../Makevars but if  the directory under qc is actually a soft link, 
then on some systems this goes up the real path and fails to find Makevars, so 
setting QC avoids this problem. Other lines in the Makefile can usually be
identical to the above example.

The dependencies indicated by PREREQ_PACS should only indicate the packages 
in the qc directory, as distinct from the Depends indicate in the DESCRIPTION 
file which may have other package dependencies.

The configure script looks in directories under qc and uses the existence 
of a DESCRIPTION file to identify the directory as a package. It scans 
Makefiles in these directories for the setting of a PREREQ_PACS variable, 
and uses these to build the file Makepac.Depends, which controls the order in 
which packages should be built. If PREREQ_PACS is not complete then a package 
build will typically fail when it encounters a missing requirement. However, 
make -k (see below) might build the required package in a subsequnent step, 
and invoking make again will then complete without error. If you notice this 
behaviour then check that PREREQ_PACS has been properly specified for the 
package that fails.

The configure script also generates files Makefile, Makerules and Makevars
using Makefile.in, Makerules.in, Makevars.in, and Makevars.local. It should be 
possible to specify any local settings in Makevars.local, so the Make*.in 
files do not require local modification. Often there will be no need for a 
Makevars.local file but the setting of OPTIONAL_R_FILES may be useful. This
allows you to specify that you expect your packages to have any of the files
.Rbuildignore, NEWS, and inst/CITATION, which are optional in R packages. If
these are specified then make will look for them and building the final tarball
will be redone if they are changed. (See the file Makevars.local.example.)

The configure script is run in the qc directory by

  ./configure  

It should be possible to rerun this script anytime. It will be necessary to 
rerun it if packages are added or the PREREQ_PACS changes in any of the 
package directory Makefiles, since the Makepac.Depends file then needs
to be rebuilt.

Another environment variable setting, not set in the Makefiles, which can
sometimes be useful is SKIPPAC. If any package names are listed in this variable
then those package will not be considered, even though they may exist in 
the qc/ directory.

###############  Usage ############### 

Make can be run in individual subdirectories or in the qc directory by the
simple command

   make

Files in the tests/ directory in each package are run first, using an unchecked
install of the package in a directory called FLAGS/ that is created in each 
package directory.  Make then builds and installs the package in an R library, 
qc/QCLIB, which is used for testing other packages. The tests can be run in 
parallel by using

   make -j

which will be faster on multicore machines. Also

   make -k

will complete all targets that do not depend on something that fails.

  make clean

removes the QCLIB, the FLAGS directories, and various files that get generated
by running tests, checking, and building. See below for a description of some
other make targets.

If the package builds and checks succesfully then a tar.gz source package
file suitable for putting on CRAN is left in the FLAGS directory. In order to
avoid having extra clutter in this file, it is useful to have a .Rbuildignore
file in the package directory. An example of possible lines for this file is

^Makefile$
FLAGS$
(^|.*/)core$
(^|.*/)run$
^Rplots(.*).pdf$
inst/doc/Rplots(.*).pdf$
inst/doc/(^|.*)\.tex$
inst/doc/(^|.*)\.R$
inst/doc/(^|.*)\.log$
inst/doc/(^|.*)\.stdout$
.Rd2dvi(^|.*)
(^|.*)\.ps$


###############  svn considerations ############### 

The qc directory itself can be a version checked out from the R-forge svn
repository. Directories below it may also be checked out from other 
repositories, but do not expect svn commands in the qc directory to
recognize this. The make target

  make svnstatus

descends into each package directory and runs svn status. If you need to do
other svn commands in a package then you should cd into the package directory.
(If you are editing several related packages from an R-forge project, it may be
easier to check out the pkg/ directory somewhere other than under qc/ and then
make links under qc/ to the individual packages. Then svn commits in the pkg/
directory will commit changes in all the packages.) 

If the packages are checked out from svn then it may also be useful to edit the
svn properties to ignore some files. You might want to

   export SVN_EDITOR=vi  #or vim or nano -w 

Then, from the qc directory

   svn propedit  svn:ignore PKG

where PKG is the name of the package directory, and add lines like

plots*.pdf
Rplots*.ps
Rplots*.pdf
FLAGS


###############  other make targets ############### 

Some other make targets are provided for convenience:

  make issues

descends into each package directory and greps several files output by the make
process to look for errors, warnings, and notes. If this reports
 "grep: FLAGS/RCMDcheck.out: No such file or directory"
in some directories, that is an indication that make did not complete the
building and checking of that package. (Usually it is fairly clean when make 
has failed, but "make -k" with a large number of packages can sometimes obscure
the failures, so "make issues" is useful in this case.)

The target

  make install 

descends into each package directory and, if the build and check have been
successful, installs the package into the library specified by the environment
variable PREFIX. This is indended for the case when the package is to be put in
place for general use at a site, without necessarily putting it on CRAN first.
The target

  make install-site

is similar but installs the package into the site-library for the R version
currently in use.

The target

  make debug 

should be run in a package directory. It starts R with the same parameters as it
is started in the make process, using the unchecked package and the QCLIB. More
specifically, it does

   R_LIBS=$(FLAGS)/unchecked/$(PAC):$(QCLIB) R_LIBS_SITE=$(RSITE) \
	   $(RENV) R --vanilla

(The variable RENV can be set in the file Makevars.local if there is a need for
any special local environment setting, for example, a load library path.) The
make debug target can be useful for things as simple as checking what libraries
and packages are being used. The do this run "make debug" and then, in the R
session that is started, look at the output of library().

The target

  make debug-vign

should be run in a package directory. It echos the R code stripped from a
vignette (to allow simple copy and paste) and then starts R as in make debug 
above. (This is simplistic debugging but sometimes useful.)


###############  Interpretation of make error messages ############### 

When make fails it indicates what target failed or what rule it could not 
figure out. While these are often immediately understandable, especially 
with experience, this can be a bit confusing in the beginning (possibly an
understatement). The ultimate way to find what is going wrong is to look at the
rule (in Makerules.in) that is being executed and see why it failed. The "@"
at the beginning of lines in a target prevent echoing the line when it is
executed. This is useful, to hide extra output when things work, but when things
fail it can be helpful to remove the "@". However, BEWARE that the lines in the
targets begin with a tab character, NOT spaces, and if you remove the tabs then
make messes up in a way that can be very difficult to understand.

With luck, the most likely messages you will get are: 

######
   make[1]: *** No rule to make target `.Rbuildignore', needed by ...  Stop.

This means that your package does not have a file .Rbuildignore but your
setting of OPTIONAL_R_FILES in Makevars.local specifies it, so make should fail
if it does not exist. Either put a .Rbuildignore in the package directory, or
change the setting of OPTIONAL_R_FILES.


######
   make[1]: *** No rule to make target `NEWS', needed by ...  Stop.

This means that your package does not have a file NEWS but your
setting of OPTIONAL_R_FILES in Makevars.local specifies it, so make should fail
if it does not exist. Either put a NEWS in the package directory, or
change the setting of OPTIONAL_R_FILES.


######
   Error: processing vignette 'xxx.Rnw' failed with diagnostics:
    chunk ... 
   Error in library(whatever) : there is no package called 'whatever'


This is pointing out that you cannot build the vignette because of a missing
library. If you think the library should not be missing, consult "make debug"
above, and then you may need to adjust your default R search path. There are 
a couple of solutions if the the package really is missing. One is to install 
package "whatever" so the vignette can be built. The other is to put the 
vignette  .pdf file in inst/doc/ and the line

BuildVignettes: false

in the DESCRIPTION file, so when "R CMD build" is run it does not attempt to 
build the vignette.

(But note: the target

   make vignette

which is not run by default, will need the required package, and may only 
work if you have changed to the new package structure with the .Rnw and .Stex 
files in a vignette/ directory, and only the .pdf files in inst/doc.)

######
   make: *** [FLAGS/unchecked/pkgxxx] Error 1

This signals a problem in the building the initial version of the package, 
to be used for running tests. I the problem is not obvious from the additional
make output, see the file pkgxxx/FLAGS/unchecked/install.log for more details.

######
   make: *** [pkgxxx_2011-11.20.tar.gz] Error 1

This signals a problem in the building or final check of the package 
source .tar.gz file. If it is a problem with the final check, there will 
be additional information in the file pkgxxx/FLAGS/RCMDcheck.out, where 
the output of the previuos make command line has been re-directed.

############ Hints  ############

Be careful that make -k keeps going to other packages, if there are no 
dependencies, so the error message can be buried. If you run make again 
without the -k, after it completes with the -k, then for each package you 
will get indications 

Nothing to be done for `default'

if the targets really have completed ok. If not, then it will try to build. 
If it does build, then run make again and you should get the nothing to be 
done message. If running make -k and then make a couple of times really is 
fixing a problem, this suggests a dependency that has not been correctly 
mapped (or a problem with develMake updating a target that has not been 
properly completed).


