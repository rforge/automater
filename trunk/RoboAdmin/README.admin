These scripts and Makefiles are intended to make ongoing R administration and 
updating fairly automatic. There is some initial setup and, of course, things 
need to be fixed when they break. (See also, Problems with R and Package 
Installs, below.)

These scripts and Makefiles can be checked out and update with anonymous access
to the svn archive. For example, to put files and subdirectories in the 
directory RoboAdmin (which is the directory assumed in the documentation) do 

  svn checkout \
     svn://scm.r-forge.r-project.org/svnroot/automater/trunk/RoboAdmin RoboAdmin


This may be complicated by firewalls and proxy servers.
To contribute, and for further details see "SVN Notes" below.


#################################################################
##### Quick Notes (for those that do not like documentation)#####
#################################################################

First run

  ./configure 

to generate Makevars, then 

  cp Makevars.site.example Makevars.site

and edit Makevars.site to add or remove packages and users/support email 
addresses. (See README.user and further below if you cannot guess what 
settings in Makevars.site do.)

Installing R can then be done in a cron job (more below) or manually by

 ./getDates
 make

To do local testing of the installation (recommended) it will be necessary to add
directories and files in the tests/ directory. Some examples are provided, and in 
some cases these *.R.example files can be simply copied to *.R files. If you would 
like to contribute other examples, please contact 
   automater-suggestions@lists.r-forge.r-project.org
or pgilbert.ttv9z@ncf.ca.

  make tests

will run the tests. This can be added to the cron job.

#################################################################
#####          End Quick Notes                              #####
#################################################################

#################################################################
#####          Local Configuration                          #####
#################################################################

It should be possible to do any local configuration in the file Makevars.site,
but the tests directory should have directories with locally defined *.R 
files that stop and/or q(status= 1) if things are not working.

The Makefile, getDates, and the cronjob control what really happens. Below is
an attempt to document this, but look especially at the Makefile if you want to
really know what happens.

The description in this file is generic. Keep site specific notes somewhere else
(for example, as comments in Makevars.site).
  
Make will update site-library-fresh even when a new R version is not installed.
(This can be automated with a cron job, described below.) 

To add more packages to the list installed in the different libraries, modify 
the variables in the Makevars.site file. The package will be installed when 
the cron job runs, or can be done immediately with

  make

The logic of these libraries is that site-library (packages defined by SITE)
is the one users will normally want and, after R and the library packages are 
installed, this library will remain unchanged other than to add any packages 
added to the list (SITE). 

Normal users might also use site-library-fresh (packages defined by FRESH), 
in which packages will be updated regularly. See the README.user file for 
directions on how a user would access this. 

To install packages in the existing R site-library do

  make site

To update the packages in  site-library-fresh do

  make fresh

(Note, the policy is to not update packages in the site-library. )

To run any tests you have specified in the tests/ directory

  make tests
   
or the equivalent

  make testsite

This runs tests for using site-library. It will only run tests for 
which a library has been updated, or for which tests that have been 
changed or added. 

  make testfresh
and
  make testdevel

runs tests for using site-library-fresh or site-library-devel.

If no changes have been made, but you want to run all tests then

  cd test
  make clean
  make testsite
  make testfresh
  make testdevel


#################################################################
#####          Local Development Configuration              #####
#################################################################

The libraries site-library-devel (packages defined by DEVEL) and 
site-library-fresh-notdevel (packages defined by FRESHnotDEVEL) 
are for the purpose of any packages you might be developing at your own site, 
or using from R-forge, and need to test. These will not be used 
by normal users. Devel is for the packages under development, 
while fresh-notdevel has packages needed for development but not actually 
being developed. (The logic of this is to reduce the possibility 
of accidentally testing with old versions of development packages that
have been installed in site-library or site-library-fresh.)

To update the packages in  site-library-fresh-notdevel and site-library-devel do

   make devel

Tests can also be run for the devel libraries with

   make testdevel
    
#################################################################
#####         cron job Configuration                        #####
#################################################################

A cron job can be used to check for a new versions of R and install it. 
The cron job should run ./getDates and then make. Make will build and install a 
new R version if it is available, based on the dates, then install site-library,
site-library-fresh, site-library-devel, and site-library-fresh-notdevel. 

The cron job will check the version of the R release, which is relatively 
quick when there is not a new release, and then update packages in the FRESH 
list as specified in Makevars.site. This also is fairly quick.

The crontab file can be viewed with 
crontab -l

To edit
export EDITOR=vi
crontab -e

If the cron job has any output it will be mailed to the address(es) last specified in 
lines above the cron job in the crontab file, so different mailto's can be specified
for different cron jobs.

MAILTO="user1@mailhost"
MAILTO="user1@mailhost,user2@domain.com"

To run daily insert lines like, for example,

m h * * * (echo running on `uname -n` ; cd RoboAdmin ; ./getDates ; make ;
 make testsite ; make testfresh) >RoboAdmin/cron.out

(all on one line) with m and d replace by minute and hour. The above produces 
output, so mail will be sent if any MAILTO address has been specified. 
Alternately

m h * * * (cd RoboAdmin ; ./getDates ; make  >cron.out 2>&1 ; make testsite 
  >>cron.out 2>&1 ; make testfresh >>cron.out 2>&1)  || 
  echo "Error occurred.  See $HOME/RoboAdmin/cron.out for details"

or

m h  * * * ( cd RoboAdmin ; ./getDates ; make >cron.out 2>&1 ; 
  make site-library-fresh-notdevel >>cron.out 2>&1 ; 
  make testfresh  >>cron.out 2>&1) || 
  echo "Error occurred.  See $HOME/RoboAdmin/cron.out for details"

(all on one line) will send mail if the last make has a non-zero exit
status. (Separate from the cron email, some make targets can be set to send 
mail notifications about updates.) 

If a http_proxy is needed it can be 
specified:

m h * * * (export http_proxy='http://wwwproxy:8080'; cd RoboAdmin ; ./getDates ; make ; make tests ) >RoboAdmin/cron.out


[crontab Entry Format
     A crontab file consists of lines of  six  fields  each.  The
     fields  are  separated by spaces or tabs. The first five are
     integer patterns that specify the following:

     minute (0-59),
     hour (0-23),
     day of the month (1-31),
     month of the year (1-12),
     day of the week (0-6 with 0=Sunday).
]

 
#################################################################
#####                SVN Notes                              #####
#################################################################

These scripts and Makefiles can be checked out and update with anonymous access
to the svn archive. For example, to put files and subdirectories in the 
directory Rprod (using a directory named RoboAdmin is assumed in most of the
documentation) do 

  svn checkout \
     svn://scm.r-forge.r-project.org/svnroot/automater/trunk/RoboAdmin Rprod

This may be complicated by firewalls and proxy servers.
(At some sites this can be fixed by settings in  ~/.subversion/servers
  http-proxy-host=wwwproxy
  http-proxy-port=8080

If you want to contribute, register as a site user at 

  https://r-forge.r-project.org/

and then request to join the project at

   https://r-forge.r-project.org/projects/automater/

Then you will be able to checkout:

  svn checkout svn+ssh://userid@scm.r-forge/svnroot/automater/trunk/RoboAdmin RoboAdmin

and commit back to the repository. For sites that do not allow ssh on port 22, 
this will also work on port 23 by putting an appropiate entry in 
your .ssh/config file:

host r-forge
    Hostname scm.r-forge.r-project.org
    Port 23
    ForwardAgent no
    ForwardX11 no

then checkout can be done with:
svn checkout svn+ssh://userid@r-forge/svnroot/automater/trunk/RoboAdmin RoboAdmin

#################################################################
#####      Problems with R and Package Installs            #####
#################################################################

Compiling R requires the a fortran and C compiler, X11 header files, 
and some other things that are often not installed on a computer not 
used for program development. Also, some packages require additional 
support libraries. Following are notes about some Debian / Ubuntu
packages that are needed.

If a package fails to install it is not signalled as an error, so 
other packages will be installed, and updates will be done by the 
cron job. Make will try again to install when it is re-run, 
so once the package dependencies are in place then make should 
install it (automatically if a cron job is run).

########## For R ##########
  g++
  gfortran
  libreadline6-dev
  libx11-dev
  libxt-dev

  texlive-base
  texlive-extra-utils
  texlive-latex-base
  texlive-bibtex-extra (puts standard url bst files in /usr/share/texmf-texlive/bibtex/bst/urlbst
  texlive-fonts-recommended (to build GPArotation, and others?)

  texinfo
  texi2html

  tcl8.5
  tk8.5
  libatlas-base-dev   (to use debian/ubuntu  R build and be able to compile f77)

    
########## For Packages ##########

  libxml2-dev to build  XML  for SSOAP
  libcurl4-openssl-dev  (or libcurl4-gnutls-dev)  to build Rcurl for SSOAP
  libmysqlclient-dev      	for RMySQL
  mysql-client      		for RMySQL, TSMySQL

  libpq-dev               	for RPostgreSQL
  postgresql-client-common	for RPostgreSQL, TSPostgreSQL

  libclass-csv-perl       to build WriteXLS with working xls interface
 
  unixodbc            
  unixodbc-bin            
  odbc-dev                for RODBC
  odbc-postgres           for RODBC to talk to PostgreSQL
  
  fame package  requires proprietary Fame HLI libraries

