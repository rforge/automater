This Makefile based system does not install R. It is intended for running 
regular (automatic) tests when the tests themselves, or the packages they 
depend on, are updated. 

It uses an already installed R version (eg, from RoboAdmin), the location of
which should be given as an argument to configure.

##########  Installation   ##########

Download or svn checkout from 

   scm.r-forge.r-project.org/svnroot/automater/trunk/RoboTests/

  ./configure  /path/to/R_HOME

and install any tests to be run (see below).

##########   Tests Setup      ##########

Tests to run should be organized in subdirectories below tests/. The names 
of subdirectories may correspond to an R package name, in which case the 
tests would typically be tests for that package, but that is not enforced 
in any way. These directories are referred to below as pkgtests for 
convenience. Also, the tests could come from the tests/ directory for the 
package, but more typically would be additional tests that are not part of 
the package they are testing.

The tests should be self contained R code segments that load, with library() 
or requre(), any necessary packages and execute R commands. The names are 
arbitrary but should end in ".R". They should usually do

  stop("some error message")

if something does not run correctly. When the files are run successfully, 
a file with a corresponding name but extension ".Rout" will be generated. 
If a file with the extension  ".Rout.save" exists then the output file is 
compared with it, with some usual expected differences removed, and an 
make error is indicated if there is any difference. In the case of an error 
the output file will have a name with extension ".Rout.fail" The comaprison 
uses diff, so will not be useful generally for checking numerical results 
to high precision, because of small differences on different platforms and 
with different libraries. The stop() mechanism after some comparison within 
a tolerance is generally better for this. See the setRNG example discussed 
more below.

There can be multiple test files in a directory. The pkgtests/ directory 
should also have a file "Makefile" and optionally a file "Makevars.in". 
A simple example is provided in tests/setRNG available with the R-forge 
checkout. This example is configured to  run if the package setRNG in 
site-library is changed. The Makefile in this example should work for 
most other pkgtests/ directories. The file Makevars.in will need minor 
modification to indicate different dependencies for other pkgtests/ 
directories.

There is a mechanism to take the list of package dependencies from a file 
called DESCRIPTION based on the standard R package syntax for that file. 
See  tests/BB/Makevars.in for an example of that.
 
There is also a mechanism for extracting tests from different locations. 
This is done by a Makefile in the directory  pkgtests/UpdateTests/. 
BB/UpdateTests/Makefile and EvalEst/UpdateTests/Makefile provide examples of 
pulling tests automatically from the CRAN source tar.gz for packages. 
These examples use the source tar.gz for the package itself, but that is not 
necessary. A more usual situation might be to pull the tests from another 
package that depends on this package.
 
TSMySQL/UpdateTests/Makefile provides an example of pulling tests 
automatically from the R-forge svn archive for a package. 

##########     Usage       ##########

The tests can be run by the command

   make
or
   make tests

in the top level directory, the tests/ directory, or the individual package 
directories. In the later case on the tests in that directory are run.

   make update ; make test

will update any test directories that implement automatic test updates, and 
then run tests. 

##########    cron job ?      ##########


########## Additional possibly useful notes ##########

####  getting reverse dependencies of a package. 
  (Based on Rd email from Uwejan 18,2012 )

packages_to_check <- function(dep, 
  which = c("Depends", "Imports", "LinkingTo", "Suggests"), recursive = FALSE){

    download.file("http://cran.R-project.org/web/packages/packages.rds",
                "packages.rds", mode="wb")
    x <- readRDS("packages.rds")
    x <- x[!duplicated(x[,1]),]
    packages <- x[,1]
    rdeps <- tools:::.package_dependencies(packages = dep, x,
                        which = which,
                        recursive = recursive, reverse = TRUE)
    paste(apply(x[x[,1] %in% rdeps[[1]], 1:2], 1, paste, collapse="_"), ".tar.gz", sep="")
   }

result <-  packages_to_check("TSdbi")

or if you want the whole chain including recursive dependencies:

result <-  packages_to_check("sp", recursive=TRUE)

