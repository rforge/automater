QA  Quality Assessment  - 3rd party checks of packages  R,  SciPy ?, ...?

copyright Paul Gilbert, 2012

R/pkg1  where pkg1 is a package name

  - If file OS_type exists it is used to indicate which OS types the  
    package requires (unix or windows), and indicates that the 
  package can only be installed on a platform with .Platform$OS.type 
  having that value.  
  
  -If other dependencies (external to the R system) exist then they should be
   listed in lines in the file SystemRequirements. If that file does not exist
   then the package has no special system requirements.
   
#######  (svn ?) structure for reporting ####### 
R/pkg1/summary  - data and files for web page graphs
  -graph quadrant
     I   - runs ok
     II  - package maintainer considers it a feature request
     III - fails (and package maintainer has not moved it to II or IV
     IV  - package maintainer considers it an acceptable test (bug or ok)
     X   - package maintainer can request that site maintainer declared the
           test invalid (after discussion with test author who should fix
	   things). A reason should be provided.

#######  svn structure for testing ####### 
  
R/		contains package directories with snippets in each

R/Makefile

R/Makefile.packages.template

R/Makevars-PKG.site.example   example of site special restriction to be put 
             in R/pkg1/Makevars-PKG.site
...MORE

R/pkg1/			where pkg is a package name
R/pkg1/Makevars-$(PAC).site 	optional file with site settings for pkg1 
         if necessary. See example above


R/pkg1/snippets/snippetA  where snippetA is the snippet name
  -DESCRIPTION file by author the snippet
      Description:      -of snippet
      Package:		-package to which the snippet tests are targetted.
      Author: 		-of snippet
      Depends:          -requirements of the snippet exceeding the package. Note
      	if the files.R have very different requirements it may be better to put
	them in different snippets.
      License: 		-of snippet (GPL-2 default)
      Copyright: 	-of snippet (copyleft)
      OS_type:          -if more restictive than package. A justification will
                         be required. (This is a requirement to run the snippet
			 possibly comming from another package which is also
			 needed).
       
      SystemRequirements: -if more restictive than package.

   -snippet.R   code to run test with, where 'snippet' can be any name.

   -STATUS-snippet.R-$(OS): indicates details of the server that ran the test.
      The time stamp of this file also indicates if the test is up-to-date 
      or not, by the usual make mechanism: If its time stamp is more recent
      than R-version, PKG-version, and snippet.R, then it is up-to-date.
      Otherwise, the test will be run.
      (The test may be in-progess on another server, but svn lock is more
       trouble than it is worth. If the lock is not removed because of
       some failure, then other servers cannot take over. On the other hand,
       if a commit is done sooner by another server, then only the one
       server's extra test will fail to commit, and everything should continue
       normally.)

   -RESULT-files.R-$(OS) has a line with "passed" or "failed" to indicate the
      result of the test.

#######  check farm notes ####### 

1/ (start by cron)  -  
      (cd RoboAdmin ; make) install new packages if avalable (use site-library-fresh)
      (cd R ; make)


2/ Check that R is up-to-date (If not run nothing) and
   package versions are up-to-date (if not eliminate running package snippets)
      make up-to-date  # which runs in package directories
      
   These version stamp files contain two lines. The first is the version number
   and the second is the time stamp when it was generated by the first check
   farm machine to run and commit it. Because svn update uses the time of
   update, the make target sets the file date to the date recorded in it. If
   the server actual has a newer version of R or a package, then it will record
   the new version number and time stamp in the file and commit it.

3/ generate list of snippets, filtered by 

      RESOURCES available on the server from R/Makevars.site (See
            R/Makevars.site.example).

      RESOURCES-ONLY from R/Makevars.site indicating if the server should only
            do tests requiring those resourses. Empty means no restrictions.

      RESOURCE-REQUIREMENTS from R/pkg/Makevars.in indicating if the package 
           requires some special resources. Empty means no special resources
	   are needed. This is generated from the package DESCRIPTION field
	   SystemRequirements.

      RESOURCE-SNIP-REQUIREMENTS from R/pkg/snippet/Makevars.in indicating if 
           the snippet requires some special resources in addition to those
	   required by the package. Empty means no special resources
	   are needed. This is generated from the snippet DESCRIPTION field
	   SystemRequirements.

      OS-RESTRICTIONS from R/pkg/Makevars.in indicating if the package works
           only on some OSes. Empty means no restrictions. This is generated
	   from the package DESCRIPTION field OS_type.

      OS-SNIP-RESTRICTIONS from R/pkg/snippet/Makevars.in indicating if 
           the snippet works only on some OSes in addition to restrictions 
	   imposed by the package. Empty means no restrictions. Snippet 
	   authors should usually NOT need to set this and will be required to
	   provide justification for doing so. It may, for example, be needed
	   if the snippet uses other packages that have restrictions. This is 
	   generated from the snippet DESCRIPTION field OS_type.

4/ then for each snippet in list

     cp Makefile.template  R/package/snippets/snippetName
     cd R/package/snippets/snippetName
     svn update 
     make which by file does
     if  STATUS-file.R-$(OS)  indicates check-needed, and not locked, 
        then lock as in-progess
	run file.R
        svn commit
     Continue if locked or error. (make -k)

