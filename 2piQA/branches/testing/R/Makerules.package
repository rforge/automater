# For use in the packages dirs
PAC=$(notdir $(shell pwd ))

# Makevars-$(PAC).site in the package directory has overrides for packages 
# that may be installed but not working or not made available for some 
# other reason.
-include Makevars-$(PAC).site
 
# Makevars.$(PAC) in the package directory sets RESOURCES-PKG-REQUIREMENTS for
# any special package requirements. This will be set when a first snippet for 
# the package is submitted. Empty means no special resources are needed.
# It would be nice if this could be automatically generated from the 
# package DESCRIPTION "SystemRequirements:" field, but that field seems only 
# descriptive at this time, so cannot be parsed.
-include Makevars.$(PAC)

.PHONY: $(PAC)-version

default:$(PAC)-version

# hide error message if package is not installed.
installedPKG=${shell \
   echo 'packageVersion("$(PAC)")' | R --slave  2>/dev/null }

committedPKG=${shell head -1 $(PAC)-version }

PKGdate=${shell tail -1 $(PAC)-version }

# generate PACKAGE-NOT-AVAILABLE either because it is not installed
# or because of the special specification in Makevars-$(PAC).site.
# Otherwise generate OS-PKG-NOT-SUPPORTED (empty for no restrictions).


#  check OS restrictin for the package
comma:=,
empty:=
space:=$(empty) $(empty)

OS_TYPE=$(subst NA,,$(subst [1] ,,$(subst $(comma),$(space),$(shell \
   echo 'packageDescription("$(PAC)", fields ="OS_type")' | \
      R --slave 2>/dev/null))))

# $(OS) could work but may be used to broaden testing to flavours of various
#  OSes, like 32/64, Ubuntu, XP, etc. Here use the type reported by R, which
#  should be consistent with restrictions suggesteded in the package DESCRIPTION file.

THIS-OS_TYPE=$(subst [1] ,,$(shell echo '.Platform$$OS.type' | R --slave ))

# empty OS_TYPE, returned as NA by R, means any OS is ok, so set to $(THIS-OS_TYPE)
OS_SUPPORT=$(if $(OS_TYPE),$(OS_TYPE),$(THIS-OS_TYPE))

OS-PKG-NOT-SUPPORTED=$(filter-out $(OS_SUPPORT),$(THIS-OS_TYPE))

# empty RESOURCES-PKG-REQUIREMENTS set to NONE
REQ=$(if $(RESOURCES-PKG-REQUIREMENTS),$(RESOURCES-PKG-REQUIREMENTS),NONE)

test:
	@echo $(OS_TYPE)
	@echo $(THIS-OS_TYPE)
	@echo $(OS-PKG-NOT-SUPPORTED)

Makevars.auto:
	@echo "#auto-generated by make. Edits will be overwritten." >$@.tmp;
	@echo "#Put site specific requirements or restrictions "   >>$@.tmp;
	@echo "#  in Makevars-$(PAC).site "                        >>$@.tmp;
	@echo "PAC=$(PAC)"                                         >>$@.tmp;
	@if [ -n '$(NOT-AVAILABLE)' ]  ; then \
	   echo "PACKAGE-NOT-AVAILABLE=$(NOT-AVAILABLE)" >>$@.tmp ; \
	elif [ -z '$(installedPKG)' ] ; then \
	   echo "PACKAGE-NOT-AVAILABLE=NOT INSTALLED"    >>$@.tmp ; \
	else   \
	   echo "OS-PKG-NOT-SUPPORTED=$(OS-PKG-NOT-SUPPORTED)"  >>$@.tmp ;\
	   echo "RESOURCES-PKG-REQUIREMENTS=$(REQ)"             >>$@.tmp ;\
	fi
	@mv $@.tmp $@


# Next is to set pkg-version file timestamp to the same value on all
#  test farm servers, since svn update does not preserve the timestamp.
# The first server to run with a package version should recognize this and
#  do the commit to update the $(PAC)-version file.

#  THIS IS ASSUMING DIFFERENT VERSION IS NEWER VERSION!!!!
# If this fails the target may be generated anyway, but the usual trick of
#  writing first to $@.tmp will not work because the svn commit needs the
#  actual file. However, the next svn update may clean things up.
$(PAC)-version: Makevars.auto
	@svn update
	@if [ -n '$(PACKAGE-NOT-AVAILABLE)' ]; then \
	    echo package $(PAC) not available ; exit 0 ; fi
	@if [ '$(committedPKG)' = '$(installedPKG)' ]; then \
	    touch --date "$(PKGdate)"  $@ ;\
 	  else \
 	    echo changed $(PAC) version ;\
 	    echo '$(installedPKG)'           >$@ ;\
 	    date "+%Y/%m/%d %H:%M:%S.%N %Z" >>$@ ;\
	    svn commit $@ -m '$@n updated to $(installedPKG).' ;\
 	  fi

clean:
	$(RM) Makevars.auto Makevars.auto.tmp

