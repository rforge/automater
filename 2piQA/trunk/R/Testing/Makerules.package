# For use in the Testing/$(OSTAG)/$(PAC) dir

PAC:=$(notdir $(shell pwd ))
SNIPPETS:=${shell  ls -a -d */.. | perl -pe 's/\/\.\.//g'  }

# $(INSTALLED)   is set in $(2piHOME)/Makevars.in

# Makevars-$(PAC).site in the package directory has overrides for packages 
# that may be installed but not working or not made available for some 
# other reason. 
# Makevars.$(PAC) sets PKG-RESOURCE-REQUIREMENTS for
# any special package requirements. This will be set when a first snippet for 
# the package is submitted. Empty means no special resources are needed.
# It would be nice if this could be automatically generated from the 
# package DESCRIPTION "SystemRequirements:" field, but that field seems only 
# descriptive at this time, so cannot be parsed.


default: $(SNIPPETS)


.PHONY: $(SNIPPETS)

#include $(2piHOME)/../Makerules.R

currentPKG=${shell head -1 $(PAC)-version }

# hide error message if package is not installed.
installedPKG=$(shell \
   echo 'cat(as.character(packageVersion("$(PAC)")))' | $(MKR) 2>/dev/null )

# set TRUE if a newer package is installed than the one 
#  recorded in $(PAC)-version file.
newPKG=$(subst [1] ,,$(shell \
 if   [ -z '$(installedPKG)' ] ; then echo "FALSE" ; \
 elif [ -z '$(currentPKG)' ] ; then echo "TRUE"  ; \
 else   \
  echo '(packageVersion("$(PAC)") > "$(currentPKG)")' | $(MKR) 2>/dev/null ; \
 fi))


# generate PACKAGE-NOT-AVAILABLE either because it is not installed
# or because of the special specification in Makevars-$(PAC).site.
# Otherwise generate OS-PKG-NOT-SUPPORTED (empty for no restrictions).


#  check OS restriction for the package
comma:=,
empty:=
space:=$(empty) $(empty)

OS_TYPE=$(subst NA,,$(subst [1] ,,$(subst $(comma),$(space),$(shell \
   echo 'packageDescription("$(PAC)", fields ="OS_type")' | $(MKR) 2>/dev/null))))

# $(OS_TAG) is not exactly the same as it indicates more detailed testing
# flavours including eg 32/64, MPI, ...
# Here use the type reported by R, which should be consistent
# with restrictions suggested in the package DESCRIPTION file.

THIS-OS_TYPE=$(subst [1] ,,$(shell echo '.Platform$$OS.type' | $(MKR) ))

# empty OS_TYPE, returned as NA by R, means any OS is ok, so set to $(THIS-OS_TYPE)
OS_SUPPORT=$(if $(OS_TYPE),$(OS_TYPE),$(THIS-OS_TYPE))

OS-PKG-NOT-SUPPORTED=$(filter-out $(OS_SUPPORT),$(THIS-OS_TYPE))


#DEPENDS is other packages needed for $(PAC) and to run its SelfTest.
# To guarantee this means Depends + Imports + Suggests (but not Enhances)
# Many Selftests may not need Suggests, but there is no way to know.

SUBC='cat(sub(" R ","",gsub("\\\(.*?\\\)", "", gsub("NA","",gsub(","," ", \
paste(" ", installed.packages()["$(PAC)",c("Depends", "Imports", "Suggests")],\
collapse=""))))))'

PKG-DEPENDS=$(shell  if [ -z '$(installedPKG)' ]  ; then echo '' ; \
   else echo $(SUBC) | $(MKR) ; fi )

PKG-DEPENDS-NOT-AVAILABLE=$(filter-out $(INSTALLED),$(PKG-DEPENDS))


SUBR='cat(gsub("\\\(.*?\\\)", "", gsub("NA","",gsub(","," ", \
paste(" ", installed.packages(fields="SystemRequirements")["$(PAC)","SystemRequirements"],\
collapse="")))))'

PKG-RESOURCE-REQUIREMENTS=$(shell  if [ -z '$(installedPKG)' ]  ; then echo '' ; \
   else  echo $(SUBR) | $(MKR) ; fi )

# empty PKG-RESOURCE-REQUIREMENTS set to NONE
REQ=$(if $(PKG-RESOURCE-REQUIREMENTS),$(PKG-RESOURCE-REQUIREMENTS),NONE)

REQNOT=$(filter-out $(RESOURCES),$(REQ))

test:
	@echo ROBOHOME set to $(ROBOHOME)
	@echo R set to $(R)
	@echo MKR set to $(MKR)
	@echo $(installedPKG)
	@echo $(currentPKG)
	@echo $(newPKG)
	@echo $(THIS-OS_TYPE)
	@echo $(OS-PKG-NOT-SUPPORTED)
	@echo $(NOT-AVAILABLE)
	@echo NOT-AVAILABLE '"$(NOT-AVAILABLE)"'
	@echo PACKAGE-NOT-AVAILABLE '"$(PACKAGE-NOT-AVAILABLE)"'
	@echo $(installedPKG)
	@echo $(SUBR)
	@echo PKG-RESOURCE-REQUIREMENTS '"$(PKG-RESOURCE-REQUIREMENTS)"'
	@echo PKG-RESOURCES-NOT-AVAILABLE '"$(REQNOT)"'

# Beware that Makevars.auto is site specific and made when a test (farm) server 
# installs the system, and possibly other times, so 
# it should not be a pre-req for other targets.

Makevars.auto: ../../../Packages/$(PAC)/$(PAC)-version ../../R-version
	@#echo making $@
	@echo "#auto-generated by make. Edits will be overwritten." >$@.tmp;
	@echo "#Put site specific requirements or restrictions "   >>$@.tmp;
	@echo "#  in Makevars-$(PAC).site "                        >>$@.tmp;
	@echo "# Note that this file needs to be remade at a site" >>$@.tmp;
	@echo "#       make Makevars.auto "                        >>$@.tmp;
	@echo "# in directory Testing/os/pac  if the availability" >>$@.tmp;
	@echo "# of dependencies or requirements changes at the site." >>$@.tmp;
	@echo "# (It will be automatically re-written with the "   >>$@.tmp;
	@echo "#  release of a new R or new package.)"             >>$@.tmp;
	@echo "PAC=$(PAC)"                                         >>$@.tmp;
	@# NOT-AVAILABLE is a site specific setting (not generated)
	@if [ -n '$(NOT-AVAILABLE)' ]  ; then \
	   echo "PACKAGE-NOT-AVAILABLE=$(NOT-AVAILABLE)" >>$@.tmp ; \
	elif [ -z '$(installedPKG)' ] ; then \
	   echo "PACKAGE-NOT-AVAILABLE=NOT INSTALLED"    >>$@.tmp ; \
	else   \
	   echo "PACKAGE-NOT-AVAILABLE="                 >>$@.tmp ; \
	   echo "PAC-VERSION=$(installedPKG)"            >>$@.tmp ; \
	   echo "OS-PKG-NOT-SUPPORTED=$(OS-PKG-NOT-SUPPORTED)" >>$@.tmp ;\
	   echo "PKG-DEPENDS=$(PKG-DEPENDS)"                   >>$@.tmp ;\
	   echo "PKG-DEPENDS-NOT-AVAILABLE=$(PKG-DEPENDS-NOT-AVAILABLE)" >>$@.tmp ;\
	   echo "PKG-RESOURCE-REQUIREMENTS=$(REQ)"             >>$@.tmp ;\
	   echo "PKG-RESOURCES-NOT-AVAILABLE=$(REQNOT)"        >>$@.tmp ;\
	fi
	@mv $@.tmp $@


$(SNIPPETS):%: ../../../Packages/$(PAC)/$(PAC)-version %/Makefile ../../R-version # PHONY 
	@#pull
	@$(RSYNC) -truq $(CENTRAL)/$(OS_TAG)/$(PAC)/$@  . 
	@$(MAKE) -k  --directory=$@


$(SNIPPETS:%=%/Makefile): 
	@echo "# this gets generated automatically in each snippet dir"  >$@
	@echo "include $(2piHOME)/Makevars.site"                        >>$@
	@echo "include $(2piHOME)/Makevars.in"                          >>$@
	@echo '-include Makevars-$$(SNIP).site'                         >>$@
	@echo "include $(2piHOME)/Makerules.snippet"                    >>$@


# This target syncs $(PAC)-version, which cannot be a PHONY target because
# it is a pre-req for everything else. checkVersion is effectively PHONY because
# it does not produce a file checkVersion.
# There is no real dependency on Makevars.auto, but calculating dependencies for
# other targets works better if this file is already in place.  Since Makevars.auto
# depends on   ../../../Packages/$(PAC)/$(PAC)-version and checkVersion updates it,
# there is a circularity here, but it is not important, because the dependency is
# artificial. Make does not complain, because the update is a side effect.

# Note there is also a target checkVersions that does all + R-version
# Not sure why (possibly circularity above) but to get Makevars.auto generated, 
# it sometimes seems necessary to run "make -j checkVersions" twice.

checkVersion: ../../R-version  Makevars.auto
	@#pull
	@$(RSYNC) -tuq $(CENTRAL)/../Packages/$(PAC)/$(PAC)-version \
	            ../../../Packages/$(PAC)/$(PAC)-version
