# For use in the snippets dirs
RFILES:=${shell ls *.[rR] }

include   ../Makevars.auto
#sets PAC PACKAGE-NOT-AVAILABLE RESOURCES-PKG-REQUIREMENTS OS-PKG-NOT-SUPPORTED 

#overrides are set in:
-include   ../Makevars.$(PAC)


#RESOURCES are set in:
include ../../../Makevars.site

#Requirements=${filter  ${PACKAGES},${shell perl -pe 's/,[\s]*\n/, /g' DESCRIPTION |\
#  grep "SystemRequirements:"  | perl -pe 's/SystemRequirements\://' |  perl -pe 's/,//g' }}

#Note that SNIP resources and restrictions apply to all *.R files in the dir/
#(snippet specific restrictions are discouraged)
#RESOURCES-SNIP-REQUIREMENTS OS-SNIP-NOT-SUPPORTED are set in:
-include      Makevars.$(SNIP)

RESOURCES-REQUIREMENTS:=$(RESOURCES-PKG-REQUIREMENTS) $(RESOURCES-SNIP-REQUIREMENTS)

OS-NOT-SUPPORTED:=$(OS-PKG-NOT-SUPPORTED)$(OS-SNIP-NOT-SUPPORTED)

# if ONLY is empty then tests should be skipped
ONLY:=$(if $(RESOURCES-ONLY),$(filter $(RESOURCES-REQUIREMENTS),$(RESOURCES-ONLY)),RUN)

skipIfNotEmpty:=$(PACKAGE-NOT-AVAILABLE)$(OS-NOT-SUPPORTED)

# if ONLY indicates tests can be run, then run if resources are available
skipIfEmpty:=$(if $(ONLY),$(filter $(RESOURCES-REQUIREMENTS),$(RESOURCES) NONE),)

RESOURCES-OK:=$(if $(skipIfNotEmpty),,$(if $(skipIfEmpty),RESOURCES-OK,))
TESTABLE:=$(shell cat TESTABLE-$(OS_TAG))

TESTS:=$(if $(skipIfNotEmpty),,$(if $(skipIfEmpty),$(RFILES),))

default: STATUS_SUMMARY-$(OS_TAG) TESTABLE-$(OS_TAG)

Makefile: ../../../Makefile.snippet.template
	@cp $< $@

# snippet should throw an error if it fails, but that is not a failure of 
#  the make. The generated RESULT keeps track of tests that pass or fail.
#  Make keeps track of whether the test has been run or not with STATUS.


test: 
	@echo skipIfEmpty$(skipIfEmpty)
	@echo skipIfNotEmpty$(skipIfNotEmpty)
	@echo $(PACKAGE-NOT-AVAILABLE)
	@echo RFILES$(RFILES)
	@echo RESOURCES-OK$(RESOURCES-OK)
	if [ -z $(RESOURCES-OK) ]  ; then  echo zero$(RESOURCES-OK) ; fi
	@echo TESTABLE$(TESTABLE)
	if [ -z $(TESTABLE) ]  ; then  echo zero$(TESTABLE) ; fi
	if [ "UNKNOWN" != "$(TESTABLE)" ]  ; then  echo UNKNOWN$(TESTABLE) ; fi
	@echo TESTS$(TESTS)
	@echo 'RESOURCES-REQUIREMENTS $(RESOURCES-REQUIREMENTS)' 
	@echo 'RESOURCES $(RESOURCES)' 
	@echo 'RESOURCES-ONLY $(RESOURCES-ONLY)' 

what-if: 
	$(MAKE) --what-if=../$(PAC)-version  default

# Note that TESTABLE-$(OS_TAG) here is to indicate that the resources are available on
#   some server, not necessarily on the current one!!
# Updates the file if this server has the resources via non-zero $(RESOURCES-OK), 
# and the file still indicates UNKOWN via $(TESTABLE)

.PHONY: TESTABLE-$(OS_TAG)

TESTABLE-$(OS_TAG):  ../Makevars.auto
	@# create if non existent, typically just for a new OS_TAG and it will 
	@# need to be added to svn (see svnAdd-$(OS_TAG) in top level Makefile).
	@if [ -z "$(TESTABLE)" ] ; then  echo "UNKNOWN" >$@  ; fi
	@if [ "UNKNOWN" = "$(TESTABLE)" -a -n "$(RESOURCES-OK)" ] ; then \
	       echo "$(PAC)-$(PAC-VERSION) $(shell date) ON  $(shell uname --all)" >$@  ; \
	       $(COMMIT) "$@ update by  $(shell date) ON  $(shell uname --all)" ; fi 


STATUS_SUMMARY-$(OS_TAG): $(TESTS:%=STATUS-%-$(OS_TAG))
	@# with-filename is default if more than one file. 
	@# This gives consistent fields in case of only one file.
	@egrep --with-filename '(passed|failed)' STATUS-*-$(OS_TAG) \
	  | perl -ane "print qq(@F[0,1]\n)">$@
	@# this update is in case another farm server did a commit first
	@$(UPDATE)
	@$(COMMIT) "$(PAC)-version tests and summary" 
	@# misc cleanup
	@$(RM) Rplots*.pdf *.ps *.tmp


$(TESTS:%=STATUS-%-$(OS_TAG)):STATUS-%-$(OS_TAG): % ../../../R-version ../$(PAC)-version
	@echo doing $(PAC) $@
	@# the date not the content of the file causes this target to run 
	@# the next never finishes with an error because of last touch /dev/null
	@( $(MKR) <$<  >$<out-$(OS_TAG) ; \
	    export success=$$? ;  \
	    if [ 0 -eq $$success ]  ; then \
	         echo -n " passed." >$@.tmp  ; \
	    else echo -n " failed." >$@.tmp  ;fi ; touch /dev/null)
	@echo " $(PAC)-$(PAC-VERSION) $(shell date) ON  $(shell uname --all)" >>$@.tmp 
	@mv $@.tmp  $@

####################################################################

#     Targets below will not usually be run by farm servers

####################################################################

# SUMMARY.png should depend on TESTABLE-$(OS_TAG) as well as STATUS_SUMMARY-$(OS_TAG), 
# for all OSTYPES, but TESTABLE-$(OS_TAG) is PHONY so adding it results in always remaking,
# thus will assume it is good if STATUS_SUMMARY is good.

# Note, this is to be run for web summary, individual servers have only one OS_TAG.

# beware resulting file name is really controlled by R code
SUMMARY.png: ../$(PAC)-version   ../../../assessSnip.R  $(OSTYPES:%=STATUS_SUMMARY-%) 
	$(MKR) < ../../../assessSnip.R


clean:
	$(RM) *-$(OS_TAG) R-version  *.pdf *.ps *.tmp
	$(UPDATE)
