# For use in the packages dirs
PAC=$(notdir $(shell pwd ))
SNIPPETS=${shell  ls */DESCRIPTION | perl -pe 's/\/DESCRIPTION//g'  }

include ../../Makevars.site

# Makevars-$(PAC).site in the package directory has overrides for packages 
# that may be installed but not working or not made available for some 
# other reason.
-include Makevars-$(PAC).site
 
# Makevars.$(PAC) in the package directory sets RESOURCES-PKG-REQUIREMENTS for
# any special package requirements. This will be set when a first snippet for 
# the package is submitted. Empty means no special resources are needed.
# It would be nice if this could be automatically generated from the 
# package DESCRIPTION "SystemRequirements:" field, but that field seems only 
# descriptive at this time, so cannot be parsed.
-include Makevars.$(PAC)

.PHONY: $(PAC)-version $(SNIPPETS)

default:$(PAC)-version $(SNIPPETS)

Makefile: ../../Makefile.packages.template
	@cp $< $@


committedPKG=${shell head -1 $(PAC)-version }

# hide error message if package is not installed.
installedPKG=$(shell \
   echo 'cat(as.character(packageVersion("$(PAC)")))' | $(MKR) 2>/dev/null )

# set TRUE if a newer package is installed than the one 
#  recorded in $(PAC)-version file.
newPKG=$(subst [1] ,,$(shell \
 if   [ -z '$(installedPKG)' ] ; then echo "FALSE" ; \
 elif [ -z '$(committedPKG)' ] ; then echo "TRUE"  ; \
 else   \
  echo '(packageVersion("$(PAC)") > "$(committedPKG)")' | $(MKR) 2>/dev/null ; \
 fi))

PKGdate=${shell tail -1 $(PAC)-version }

# generate PACKAGE-NOT-AVAILABLE either because it is not installed
# or because of the special specification in Makevars-$(PAC).site.
# Otherwise generate OS-PKG-NOT-SUPPORTED (empty for no restrictions).


#  check OS restrictin for the package
comma:=,
empty:=
space:=$(empty) $(empty)

OS_TYPE=$(subst NA,,$(subst [1] ,,$(subst $(comma),$(space),$(shell \
   echo 'packageDescription("$(PAC)", fields ="OS_type")' | $(MKR) 2>/dev/null))))

# $(OS_TAG) is not exactly the same as it indicates more detailed testing
# flavours including eg 32/64, MPI, ...
# Here use the type reported by R, which should be consistent
# with restrictions suggested in the package DESCRIPTION file.

THIS-OS_TYPE=$(subst [1] ,,$(shell echo '.Platform$$OS.type' | $(MKR) ))

# empty OS_TYPE, returned as NA by R, means any OS is ok, so set to $(THIS-OS_TYPE)
OS_SUPPORT=$(if $(OS_TYPE),$(OS_TYPE),$(THIS-OS_TYPE))

OS-PKG-NOT-SUPPORTED=$(filter-out $(OS_SUPPORT),$(THIS-OS_TYPE))

# empty RESOURCES-PKG-REQUIREMENTS set to NONE
REQ=$(if $(RESOURCES-PKG-REQUIREMENTS),$(RESOURCES-PKG-REQUIREMENTS),NONE)

test:
	@echo ROBOHOME set to $(ROBOHOME)
	@echo R set to $(R)
	@echo MKR set to $(MKR)
	@echo $(installedPKG)
	@echo $(committedPKG)
	@echo $(newPKG)
	@echo $(THIS-OS_TYPE)
	@echo $(OS-PKG-NOT-SUPPORTED)
	@echo $(NOT-AVAILABLE)
	@echo $(PACKAGE-NOT-AVAILABLE)
	@echo $(installedPKG)

Makevars.auto: $(PAC)-version
	@#echo making $@
	@echo "#auto-generated by make. Edits will be overwritten." >$@.tmp;
	@echo "#Put site specific requirements or restrictions "   >>$@.tmp;
	@echo "#  in Makevars-$(PAC).site "                        >>$@.tmp;
	@echo "PAC=$(PAC)"                                         >>$@.tmp;
	@if [ -n '$(NOT-AVAILABLE)' ]  ; then \
	   echo "PACKAGE-NOT-AVAILABLE=$(NOT-AVAILABLE)" >>$@.tmp ; \
	elif [ -z '$(installedPKG)' ] ; then \
	   echo "PACKAGE-NOT-AVAILABLE=NOT INSTALLED"    >>$@.tmp ; \
	else   \
	   echo "PAC-VERSION=$(installedPKG)"            >>$@.tmp ; \
	   echo "OS-PKG-NOT-SUPPORTED=$(OS-PKG-NOT-SUPPORTED)"  >>$@.tmp ;\
	   echo "RESOURCES-PKG-REQUIREMENTS=$(REQ)"             >>$@.tmp ;\
	fi
	@mv $@.tmp $@


# Next is to set pkg-version file timestamp to the same value on all
#  test farm servers, since svn update does not preserve the timestamp.
# The first server to run with a package version should recognize this and
#  do the commit to update the $(PAC)-version file.

# If this fails the target may be generated anyway, but the usual trick of
#  writing first to $@.tmp will not work because the svn commit needs the
#  actual file. However, the next svn update may clean things up.
$(PAC)-version: ../../R-version 
	@echo checking $@
	@#update was just done for R-version, so probably not needed here
	@#$(UPDATE)
	@if   [ "$(newPKG)" = "FALSE" ]; then\
	      touch --date "$(PKGdate)"  $@ ;\
 	elif [ "$(newPKG)" = "TRUE" ]; then\
 	      echo changed $(PAC) version ;\
 	      echo '$(installedPKG)'           >$@ ;\
 	      date "+%Y/%m/%d %H:%M:%S.%N %Z" >>$@ ;\
	      $(COMMIT) '$@n updated to $(installedPKG).'  $@ ;\
  	else \
 	      echo newPKG has a faulty indicator:$(newPKG). ;\
 	      echo This should not happen. ; \
	      exit 1;\
	fi

$(SNIPPETS): $(PAC)-version Makevars.auto # PHONY 
	@$(UPDATE) $@
	@#date "+%Y/%m/%d %H:%M:%S.%N %Z"
	@#j1 so svn locks do not conflict
	@$(MAKE) -j1 -k  --directory=$@


####################################################################

#     Targets below will not usually be run by farm servers

####################################################################

# these should depend on */TESTABLE too, as it needs to be redone if 
# a new OS_TAG is added.

assessSnippets: $(SNIPPETS:%=%/SUMMARY.png) LABEL.png

.PHONY: $(SNIPPETS:%=%/SUMMARY.png)

$(SNIPPETS:%=%/SUMMARY.png):
	@$(MAKE)  --directory=$(dir $@) SUMMARY.png

# beware resulting file name is really controlled by R code
LABEL.png: $(PAC)-version ../../pkgLabel.R
	$(MKR) <../../pkgLabel.R

# This target sets the R-version time stamp to a new date/time so that
# a complete remake will trigger. It is only for developement/debugging purposes.

fakeNewPackage-version:
	echo '$(installedPKG)'             >$(PAC)-version 
	date "+%Y/%m/%d %H:%M:%S.%N %Z"   >>$(PAC)-version
	$(COMMIT) '$(PAC)-version $(installedPKG) time stamp reset.' \
	    $(PAC)-version

clean:
	$(RM) Makevars.auto Makevars.auto.tmp LABEL.png

