
# BEWARE that the default is run often by a cron job, so default should 
#    usually only need to do anything for target "fresh". 
#  Other targets should only trigger if getDates indicates 
#    a new R version is released.


default: latest-ok installR notifyUsersNewR \
  site-library notifyUsersNewLibs fresh 

# If DEVEL is specified in Makevars.site then target "fresh" will also
#    do target update-site-library-fresh-notdevel
# This will typically be non-empty only if you have on site package development. 

### site-library  is typically installed with new R version and not updated 

site-library: $(SITE:%=$(RPATH)/site-library/%) $(OTHERREPOSPKGS:%=$(RPATH)/site-library/%)
	@echo Update of packages in $(RPATH)/site-library being done.
	@test -z "$(RSUPPORT)" || \
	  echo "New packages/versions are being installed in $(RPATH)/site-library.\
	    If this message is repeated each time the cron job runs, then some \
	    package in the SITE list is probably not available, or the package \
	    install is failing." | \
	      mail -s "R site-library package update" $(RSUPPORT) 
	@touch FLAGS/$@


### fresh should be updated regularly

fresh: update-site-library-fresh update-site-library-fresh-notdevel

#latest-ok is just to provide more meaningful error messages when getDates 
# failed to get the version info. 

#Do not make this a prereq, since phony is alway run
.PHONY: latest-ok

latest-ok:
	@echo making $@ ...
	@test -z "`grep 'ERROR' R-src/Rver.log`" || \
	          (echo from   R-src/Rver.log: ; cat  R-src/Rver.log; exit 1 )
	@test -n "$(RPATH)" || \
	   (echo "Error. latest indicator is empty. HTTP probably failed." ; \
	    exit 1)

# The logic of notifyUsers is to ensure users do not get 
# sent notifications when things are failing. Eg, when a package is not
# available for a new R, the cron attempts every day until 
# the package maintainer fixes the package (or it is removed from the list of
# packages in Makevars.site). To determine if a notification should be sent,
# the current list of packages is compared against the packages at the last 
# notification. This list is not kept in FLAGS so it does not get cleaned.
# However, support should get messages in this case.

notifyUsersNewR: installR
	@test -z "$(RUSERS)" || \
	    echo "A new R has been installed in $(RPATH)" | \
	           mail -s "$(RPATH) now available" $(RUSERS) $(RSUPPORT)
	@echo there is a new R
	@touch FLAGS/$@


notifyUsersNewLibs: site-library.NOTIFIED

.PHONY: site-library.NOTIFIED
site-library.NOTIFIED:
	@$(R) 'installed.packages(lib.loc = "$(RPATH)/site-library")[,"Version", drop=FALSE] ; q(status=0)' \
	     >FLAGS/$@.tmp
	@# diff has a problem if $@ does not exist so
	@test -e $@ || touch  $@
	@# touch in next is to suppress error condition from diff
	@(diff  FLAGS/$@.tmp  $@ >FLAGS/$@.diff ; touch /dev/null)
	@if [ -s FLAGS/$@.diff ]; then  \
	  echo site-library package updates detected;  \
	  test -z "$(RUSERS)" || \
	    echo "New packages/versions have been installed in $(RPATH)/site-library" | \
	           mail -s "R site-library package updates" $(RUSERS) $(RSUPPORT) ;\
	  mv FLAGS/$@.tmp  $@ ;  \
	  fi

installR: check
	@echo making $@ ...
	(cd $(RPATH) ; make install )
	@$(MKDIR) FLAGS
	@touch FLAGS/$@

.INTERMEDIATE:build

#   bin/R seems to get touched install, so use bin/Rcmd here
build: $(RPATH)/bin/Rcmd

check: build
	@echo making $@ ...
	(cd $(RPATH) ; make check )
	@$(MKDIR) FLAGS
	@touch FLAGS/$@

check-all: build
	@echo making $@ ...
	(cd $(RPATH) ; make check-all )
	@$(MKDIR) FLAGS
	@touch FLAGS/$@

# do not use dir for time stamp, as it will change when libraries are installed

$(RPATH)/bin/Rcmd: $(ROBOHOME)/R-src/$(LATEST).tar.gz
	@echo making $@ ...
	@test -z "$(RSUPPORT)" || echo "Starting build of new version of R in$(RPATH)" | \
	           mail -s "$(RPATH) building" $(RSUPPORT) 
	@$(RM) $(RPATH)
	@gunzip -c $< | tar xf -
	(cd $(RPATH) ; ./configure --prefix=$(RPATH) $(CONFIG_OPTIONS) )
	(cd $(RPATH) ; make )
	@touch $@

$(ROBOHOME)/R-src/$(LATEST).tar.gz: R-src/latestdt
	@echo making $@ ...
	(cd R-src ; wget -o Rwget.log "$(BASE)/$(LATEST).tar.gz")
	
### site-library  ### typically not updated

$(SITE:%=$(RPATH)/site-library/%): installR
	@echo making $@ ...
	@$(MKDIR) $(RPATH)/site-library
	$(R) 'install.packages(pkgs="$(notdir $@)", lib="$(RPATH)/site-library", repos=$(REPOS), INSTALL_opts="--byte-compile") ; q(status=0)'
	@#do not touch $@ or failed install looks like success to make

$(OTHERREPOSPKGS:%=$(RPATH)/site-library/%): installR
	@echo making $@ ...
	@$(MKDIR) $(RPATH)/site-library
	$(R) 'install.packages(pkgs="$(notdir $@)", lib="$(RPATH)/site-library", repos=$(OTHERREPOS), INSTALL_opts="--byte-compile") ; q(status=0)'
	@#do not touch $@ or failed install looks like success to make

update-site-library: site-library #Note - normal policy is not to do this
	@echo making $@ ...
	$(R) 'update.packages(lib.loc="$(RPATH)/site-library", repos=$(REPOS), INSTALL_opts="--byte-compile", ask=FALSE) ; q(status=0)'
	test -z "$(OTHERREPOS)" ||  $(R) \
	   'update.packages(lib.loc="$(RPATH)/site-library", repos=$(OTHERREPOS), INSTALL_opts="--byte-compile", ask=FALSE) ; q(status=0)'
	@touch FLAGS/$@

### site-library-fresh ##  updated as needed
 
site-library-fresh: $(FRESH:%=$(RPATH)/site-library-fresh/%)

$(FRESH:%=$(RPATH)/site-library-fresh/%): installR
	@echo making $@ ...
	@$(MKDIR) $(RPATH)/site-library-fresh
	@$(R) 'install.packages(pkgs="$(notdir $@)", lib="$(RPATH)/site-library-fresh", repos=$(REPOS), INSTALL_opts="--byte-compile") ;  q(status=0)' \
	  >FLAGS/site-library-fresh.out 2>&1
	@(egrep '(trying|installing to)'  FLAGS/site-library-fresh.out >>site-library-fresh.log ; touch /dev/null)
	@#touch $@

update-site-library-fresh: site-library-fresh
	@echo making $@ ...
	@$(R) 'update.packages(lib.loc="$(RPATH)/site-library-fresh", repos=$(REPOS), INSTALL_opts="--byte-compile", ask=FALSE) ; q(status=0)' \
	  >FLAGS/$@.out 2>&1
	@(egrep '(trying|installing to)'  FLAGS/$@.out >>site-library-fresh.log ; touch /dev/null)
	@test -z "$(OTHERREPOS)" || $(R) \
	   'update.packages(lib.loc="$(RPATH)/site-library-fresh", repos=$(OTHERREPOS), INSTALL_opts="--byte-compile", ask=FALSE) ; q(status=0)' \
	  >FLAGS/$@.out2 2>&1
	@(egrep '(trying|installing to)'  FLAGS/$@.out2 >>site-library-fresh.log ; touch /dev/null)
	@#touch FLAGS/$@ do not touch. always update



#### site-library-fresh-notdevel
#  is only needed it you would like a fresh library that has only packages not
#  under development at your site, so testing can be done more easily
#  without risk of accidentally finding your package in the fresh library.

FRESHnotDEVEL=$(filter-out $(DEVEL),$(FRESH))

### site-library-fresh-notdevel
site-library-fresh-notdevel: $(FRESHnotDEVEL:%=$(RPATH)/site-library-fresh-notdevel/%)

$(FRESHnotDEVEL:%=$(RPATH)/site-library-fresh-notdevel/%): installR
	@echo making $@ ...
	@$(MKDIR) $(RPATH)/site-library-fresh-notdevel
	@$(R) 'install.packages(pkgs="$(notdir $@)", lib="$(RPATH)/site-library-fresh-notdevel", repos=$(REPOS), INSTALL_opts="--byte-compile") ; q(status=0)'
	@#touch $@

update-site-library-fresh-notdevel: site-library-fresh-notdevel
	@echo making $@ ...
	@$(R) 'update.packages(lib.loc="$(RPATH)/site-library-fresh-notdevel", repos=$(REPOS), INSTALL_opts="--byte-compile", ask=FALSE) ; q(status=0)' \
	  >FLAGS/$@.out 2>&1
	@(egrep '(trying|installing to)'  FLAGS/$@.out >>site-library-fresh-notdevel.log ; touch /dev/null)
	@test -z "$(OTHERREPOS)" ||  $(R) \
	   'update.packages(lib.loc="$(RPATH)/site-library-fresh-notdevel", repos=$(OTHERREPOS), INSTALL_opts="--byte-compile", ask=FALSE) ; q(status=0)' \
	  >FLAGS/$@.out2 2>&1
	@(egrep '(trying|installing to)'  FLAGS/$@.out2 >>site-library-fresh-notdevel.log ; touch /dev/null)


.PHONY: tests testsite testfresh  clean reallyclean

#  make tests   does testsite and testfresh
tests testsite testfresh: 
	@(cd tests ; $(MAKE) $@)

clean:
	@echo this does not remove the built or installed R, or packages
	$(RM) FLAGS testFame.db Rplots.pdf 
	@(cd tests ; $(MAKE) clean)

reallyclean: clean
	@echo this does not remove the built or installed R, or packages
	@echo WARNING reallyclean removes R-src/index.html src/latest src/latestdt
	@echo so run ./getDates before make
	$(RM) R-src/index.html R-src/latest R-src/latestdt

#distro:
#	mkdir   RoboAdmin_version
#	svn update
#	echo -n "revision number: " >>Manifest?
#	svnversion  >>Manifest?
#	copy stuff and cleanup
#	tar cf RoboAdmin_version  | gzip 
